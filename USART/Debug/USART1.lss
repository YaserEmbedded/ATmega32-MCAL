
USART1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000093e  000009d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007a  0080007a  000009ec  2**0
                  ALLOC
  3 .stab         00000ea0  00000000  00000000  000009ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007b0  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 23 04 	jmp	0x846	; 0x846 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 04 	call	0x8d2	; 0x8d2 <main>
  8a:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInit>:
volatile u8 * const DIO_u8dirs[] = {DDRA,DDRB,DDRC,DDRD};
volatile u8 * const DIO_u8pins[] = {PINA,PINB,PINC,PIND};

/*Comment!: Initialization function */
extern void DIO_voidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	/*Comment!: DDR initialization  */
	*DIO_u8dirs[0] = DIO_u8PORTA_INITDIR;
  9a:	e0 91 69 00 	lds	r30, 0x0069
  9e:	f0 91 6a 00 	lds	r31, 0x006A
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	80 83       	st	Z, r24
	*DIO_u8dirs[1] = DIO_u8PORTB_INITDIR;
  a6:	e0 91 6b 00 	lds	r30, 0x006B
  aa:	f0 91 6c 00 	lds	r31, 0x006C
  ae:	10 82       	st	Z, r1
	*DIO_u8dirs[2] = DIO_u8PORTC_INITDIR;
  b0:	e0 91 6d 00 	lds	r30, 0x006D
  b4:	f0 91 6e 00 	lds	r31, 0x006E
  b8:	10 82       	st	Z, r1
	*DIO_u8dirs[3] = DIO_u8PORTD_INITDIR;
  ba:	e0 91 6f 00 	lds	r30, 0x006F
  be:	f0 91 70 00 	lds	r31, 0x0070
  c2:	10 82       	st	Z, r1
	/*Comment!: Port initialization  */
	*DIO_u8ports[0] =(DIO_u8PORTA_INITDIR & DIO_u8PORTAINIT) | ((~DIO_u8PORTA_INITDIR)&*DIO_u8ports[0] );
  c4:	a0 91 61 00 	lds	r26, 0x0061
  c8:	b0 91 62 00 	lds	r27, 0x0062
  cc:	e0 91 61 00 	lds	r30, 0x0061
  d0:	f0 91 62 00 	lds	r31, 0x0062
  d4:	80 81       	ld	r24, Z
  d6:	8c 7f       	andi	r24, 0xFC	; 252
  d8:	8c 93       	st	X, r24
	*DIO_u8ports[1] =(DIO_u8PORTB_INITDIR & DIO_u8PORTBINIT) | ((~DIO_u8PORTB_INITDIR)&*DIO_u8ports[1] );
  da:	a0 91 63 00 	lds	r26, 0x0063
  de:	b0 91 64 00 	lds	r27, 0x0064
  e2:	e0 91 63 00 	lds	r30, 0x0063
  e6:	f0 91 64 00 	lds	r31, 0x0064
  ea:	80 81       	ld	r24, Z
  ec:	8c 93       	st	X, r24
	*DIO_u8ports[2] =(DIO_u8PORTC_INITDIR & DIO_u8PORTCINIT) | ((~DIO_u8PORTC_INITDIR)&*DIO_u8ports[2] );
  ee:	a0 91 65 00 	lds	r26, 0x0065
  f2:	b0 91 66 00 	lds	r27, 0x0066
  f6:	e0 91 65 00 	lds	r30, 0x0065
  fa:	f0 91 66 00 	lds	r31, 0x0066
  fe:	80 81       	ld	r24, Z
 100:	8c 93       	st	X, r24
	*DIO_u8ports[3] =(DIO_u8PORTD_INITDIR & DIO_u8PORTDINIT) | ((~DIO_u8PORTD_INITDIR)&*DIO_u8ports[3] );
 102:	a0 91 67 00 	lds	r26, 0x0067
 106:	b0 91 68 00 	lds	r27, 0x0068
 10a:	e0 91 67 00 	lds	r30, 0x0067
 10e:	f0 91 68 00 	lds	r31, 0x0068
 112:	80 81       	ld	r24, Z
 114:	8c 93       	st	X, r24


}
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	08 95       	ret

0000011c <DIO_u8ReadPortDir>:

extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8* Copy_u8PtrToDir)
{
 11c:	df 93       	push	r29
 11e:	cf 93       	push	r28
 120:	00 d0       	rcall	.+0      	; 0x122 <DIO_u8ReadPortDir+0x6>
 122:	00 d0       	rcall	.+0      	; 0x124 <DIO_u8ReadPortDir+0x8>
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	8a 83       	std	Y+2, r24	; 0x02
 12a:	7c 83       	std	Y+4, r23	; 0x04
 12c:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8return_status;
	if(Copy_u8PortIdx > no_of_ports)
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	84 30       	cpi	r24, 0x04	; 4
 132:	10 f0       	brcs	.+4      	; 0x138 <DIO_u8ReadPortDir+0x1c>
		{
			local_u8return_status = error;
 134:	19 82       	std	Y+1, r1	; 0x01
 136:	11 c0       	rjmp	.+34     	; 0x15a <DIO_u8ReadPortDir+0x3e>
		}
	else
		{
			*Copy_u8PtrToDir = *(DIO_u8dirs[Copy_u8PortIdx]);
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	fc 01       	movw	r30, r24
 144:	e7 59       	subi	r30, 0x97	; 151
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	01 90       	ld	r0, Z+
 14a:	f0 81       	ld	r31, Z
 14c:	e0 2d       	mov	r30, r0
 14e:	80 81       	ld	r24, Z
 150:	eb 81       	ldd	r30, Y+3	; 0x03
 152:	fc 81       	ldd	r31, Y+4	; 0x04
 154:	80 83       	st	Z, r24
			local_u8return_status = okay;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	89 83       	std	Y+1, r24	; 0x01
		}
    return local_u8return_status;
 15a:	89 81       	ldd	r24, Y+1	; 0x01
}
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	08 95       	ret

0000016a <DIO_u8ReadPinDir>:

extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8* Copy_u8PtrToDir)
{
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	00 d0       	rcall	.+0      	; 0x170 <DIO_u8ReadPinDir+0x6>
 170:	00 d0       	rcall	.+0      	; 0x172 <DIO_u8ReadPinDir+0x8>
 172:	0f 92       	push	r0
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	8b 83       	std	Y+3, r24	; 0x03
 17a:	7d 83       	std	Y+5, r23	; 0x05
 17c:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8return_status;
	u8 local_u8port_dir_val;
	
	if(Copy_u8PinIdx > no_of_total_pins)
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	80 32       	cpi	r24, 0x20	; 32
 182:	10 f0       	brcs	.+4      	; 0x188 <DIO_u8ReadPinDir+0x1e>
		{
			local_u8return_status = error;
 184:	1a 82       	std	Y+2, r1	; 0x02
 186:	25 c0       	rjmp	.+74     	; 0x1d2 <DIO_u8ReadPinDir+0x68>
		}
	else
		{
			local_u8port_dir_val = *(DIO_u8dirs[(u8)(port_number)]);
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	86 95       	lsr	r24
 18c:	86 95       	lsr	r24
 18e:	86 95       	lsr	r24
 190:	88 2f       	mov	r24, r24
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	fc 01       	movw	r30, r24
 19a:	e7 59       	subi	r30, 0x97	; 151
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	01 90       	ld	r0, Z+
 1a0:	f0 81       	ld	r31, Z
 1a2:	e0 2d       	mov	r30, r0
 1a4:	80 81       	ld	r24, Z
 1a6:	89 83       	std	Y+1, r24	; 0x01
			* Copy_u8PtrToDir = GetBit(local_u8port_dir_val,Copy_u8PinIdx%no_of_pins);
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	28 2f       	mov	r18, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	88 2f       	mov	r24, r24
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	87 70       	andi	r24, 0x07	; 7
 1b6:	90 70       	andi	r25, 0x00	; 0
 1b8:	a9 01       	movw	r20, r18
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_u8ReadPinDir+0x56>
 1bc:	55 95       	asr	r21
 1be:	47 95       	ror	r20
 1c0:	8a 95       	dec	r24
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_u8ReadPinDir+0x52>
 1c4:	ca 01       	movw	r24, r20
 1c6:	81 70       	andi	r24, 0x01	; 1
 1c8:	ec 81       	ldd	r30, Y+4	; 0x04
 1ca:	fd 81       	ldd	r31, Y+5	; 0x05
 1cc:	80 83       	st	Z, r24
			local_u8return_status = okay;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	8a 83       	std	Y+2, r24	; 0x02
		}
	
	return local_u8return_status;
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	cf 91       	pop	r28
 1e0:	df 91       	pop	r29
 1e2:	08 95       	ret

000001e4 <DIO_u8WritePortDir>:

extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
 1e4:	df 93       	push	r29
 1e6:	cf 93       	push	r28
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <DIO_u8WritePortDir+0x6>
 1ea:	0f 92       	push	r0
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	8a 83       	std	Y+2, r24	; 0x02
 1f2:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8return_status=okay;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PortIdx > no_of_ports)
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	84 30       	cpi	r24, 0x04	; 4
 1fc:	10 f0       	brcs	.+4      	; 0x202 <DIO_u8WritePortDir+0x1e>
	{
		local_u8return_status = error;
 1fe:	19 82       	std	Y+1, r1	; 0x01
 200:	0d c0       	rjmp	.+26     	; 0x21c <DIO_u8WritePortDir+0x38>
	}
	else
	{
		*(DIO_u8dirs[Copy_u8PortIdx]) = Copy_u8PortDir;
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	88 2f       	mov	r24, r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	fc 01       	movw	r30, r24
 20e:	e7 59       	subi	r30, 0x97	; 151
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	01 90       	ld	r0, Z+
 214:	f0 81       	ld	r31, Z
 216:	e0 2d       	mov	r30, r0
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	80 83       	st	Z, r24
	}
    return local_u8return_status;
 21c:	89 81       	ldd	r24, Y+1	; 0x01
}
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	cf 91       	pop	r28
 226:	df 91       	pop	r29
 228:	08 95       	ret

0000022a <DIO_u8WritePinDir>:

extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
 22a:	df 93       	push	r29
 22c:	cf 93       	push	r28
 22e:	00 d0       	rcall	.+0      	; 0x230 <DIO_u8WritePinDir+0x6>
 230:	00 d0       	rcall	.+0      	; 0x232 <DIO_u8WritePinDir+0x8>
 232:	0f 92       	push	r0
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	8a 83       	std	Y+2, r24	; 0x02
 23a:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8return_status;
	
	if(Copy_u8PinIdx > no_of_total_pins)
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	80 32       	cpi	r24, 0x20	; 32
 240:	10 f0       	brcs	.+4      	; 0x246 <DIO_u8WritePinDir+0x1c>
		{
			local_u8return_status = error;
 242:	19 82       	std	Y+1, r1	; 0x01
 244:	71 c0       	rjmp	.+226    	; 0x328 <DIO_u8WritePinDir+0xfe>
		}
	else
		{
			switch(Copy_u8PinDir)
 246:	8b 81       	ldd	r24, Y+3	; 0x03
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	3d 83       	std	Y+5, r19	; 0x05
 24e:	2c 83       	std	Y+4, r18	; 0x04
 250:	8c 81       	ldd	r24, Y+4	; 0x04
 252:	9d 81       	ldd	r25, Y+5	; 0x05
 254:	00 97       	sbiw	r24, 0x00	; 0
 256:	b1 f1       	breq	.+108    	; 0x2c4 <DIO_u8WritePinDir+0x9a>
 258:	2c 81       	ldd	r18, Y+4	; 0x04
 25a:	3d 81       	ldd	r19, Y+5	; 0x05
 25c:	21 30       	cpi	r18, 0x01	; 1
 25e:	31 05       	cpc	r19, r1
 260:	09 f0       	breq	.+2      	; 0x264 <DIO_u8WritePinDir+0x3a>
 262:	61 c0       	rjmp	.+194    	; 0x326 <DIO_u8WritePinDir+0xfc>
			{
				case DIO_u8HIGH:
					SetBit(*(DIO_u8dirs[(u8)(port_number)]),(Copy_u8PinIdx%no_of_pins));
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	86 95       	lsr	r24
 268:	86 95       	lsr	r24
 26a:	86 95       	lsr	r24
 26c:	88 2f       	mov	r24, r24
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	fc 01       	movw	r30, r24
 276:	e7 59       	subi	r30, 0x97	; 151
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	a0 81       	ld	r26, Z
 27c:	b1 81       	ldd	r27, Z+1	; 0x01
 27e:	8a 81       	ldd	r24, Y+2	; 0x02
 280:	86 95       	lsr	r24
 282:	86 95       	lsr	r24
 284:	86 95       	lsr	r24
 286:	88 2f       	mov	r24, r24
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	fc 01       	movw	r30, r24
 290:	e7 59       	subi	r30, 0x97	; 151
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	01 90       	ld	r0, Z+
 296:	f0 81       	ld	r31, Z
 298:	e0 2d       	mov	r30, r0
 29a:	80 81       	ld	r24, Z
 29c:	48 2f       	mov	r20, r24
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	88 2f       	mov	r24, r24
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	9c 01       	movw	r18, r24
 2a6:	27 70       	andi	r18, 0x07	; 7
 2a8:	30 70       	andi	r19, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 2e       	mov	r0, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_u8WritePinDir+0x8c>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_u8WritePinDir+0x88>
 2ba:	84 2b       	or	r24, r20
 2bc:	8c 93       	st	X, r24
					local_u8return_status = okay;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	89 83       	std	Y+1, r24	; 0x01
 2c2:	32 c0       	rjmp	.+100    	; 0x328 <DIO_u8WritePinDir+0xfe>
					break;
				case DIO_u8LOW:
					ClrBit(*(DIO_u8dirs[(u8)(port_number)]),(Copy_u8PinIdx%no_of_pins));
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	86 95       	lsr	r24
 2c8:	86 95       	lsr	r24
 2ca:	86 95       	lsr	r24
 2cc:	88 2f       	mov	r24, r24
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	fc 01       	movw	r30, r24
 2d6:	e7 59       	subi	r30, 0x97	; 151
 2d8:	ff 4f       	sbci	r31, 0xFF	; 255
 2da:	a0 81       	ld	r26, Z
 2dc:	b1 81       	ldd	r27, Z+1	; 0x01
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	86 95       	lsr	r24
 2e2:	86 95       	lsr	r24
 2e4:	86 95       	lsr	r24
 2e6:	88 2f       	mov	r24, r24
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	fc 01       	movw	r30, r24
 2f0:	e7 59       	subi	r30, 0x97	; 151
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	01 90       	ld	r0, Z+
 2f6:	f0 81       	ld	r31, Z
 2f8:	e0 2d       	mov	r30, r0
 2fa:	80 81       	ld	r24, Z
 2fc:	48 2f       	mov	r20, r24
 2fe:	8a 81       	ldd	r24, Y+2	; 0x02
 300:	88 2f       	mov	r24, r24
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	9c 01       	movw	r18, r24
 306:	27 70       	andi	r18, 0x07	; 7
 308:	30 70       	andi	r19, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 2e       	mov	r0, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_u8WritePinDir+0xec>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_u8WritePinDir+0xe8>
 31a:	80 95       	com	r24
 31c:	84 23       	and	r24, r20
 31e:	8c 93       	st	X, r24
					local_u8return_status = okay;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	89 83       	std	Y+1, r24	; 0x01
 324:	01 c0       	rjmp	.+2      	; 0x328 <DIO_u8WritePinDir+0xfe>
					break;
				default:
					local_u8return_status = error;
 326:	19 82       	std	Y+1, r1	; 0x01
					break;
				
			}
		}
	
	return local_u8return_status;
 328:	89 81       	ldd	r24, Y+1	; 0x01
}
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	cf 91       	pop	r28
 336:	df 91       	pop	r29
 338:	08 95       	ret

0000033a <DIO_u8WritePortVal>:
extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8 Copy_u8PortVal)
{
 33a:	df 93       	push	r29
 33c:	cf 93       	push	r28
 33e:	00 d0       	rcall	.+0      	; 0x340 <DIO_u8WritePortVal+0x6>
 340:	0f 92       	push	r0
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	8a 83       	std	Y+2, r24	; 0x02
 348:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8return_status;
	
	if(Copy_u8PortIdx > no_of_ports)
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	84 30       	cpi	r24, 0x04	; 4
 34e:	10 f0       	brcs	.+4      	; 0x354 <DIO_u8WritePortVal+0x1a>
	{
		local_u8return_status = error;
 350:	19 82       	std	Y+1, r1	; 0x01
 352:	0f c0       	rjmp	.+30     	; 0x372 <DIO_u8WritePortVal+0x38>
	}
	else
	{
		*(DIO_u8ports[Copy_u8PortIdx]) = Copy_u8PortVal;
 354:	8a 81       	ldd	r24, Y+2	; 0x02
 356:	88 2f       	mov	r24, r24
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	fc 01       	movw	r30, r24
 360:	ef 59       	subi	r30, 0x9F	; 159
 362:	ff 4f       	sbci	r31, 0xFF	; 255
 364:	01 90       	ld	r0, Z+
 366:	f0 81       	ld	r31, Z
 368:	e0 2d       	mov	r30, r0
 36a:	8b 81       	ldd	r24, Y+3	; 0x03
 36c:	80 83       	st	Z, r24
		local_u8return_status = okay;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	89 83       	std	Y+1, r24	; 0x01
	}
    return local_u8return_status;
 372:	89 81       	ldd	r24, Y+1	; 0x01
}
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	08 95       	ret

00000380 <DIO_u8ReadPortVal>:

extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToVal)
{
 380:	df 93       	push	r29
 382:	cf 93       	push	r28
 384:	00 d0       	rcall	.+0      	; 0x386 <DIO_u8ReadPortVal+0x6>
 386:	00 d0       	rcall	.+0      	; 0x388 <DIO_u8ReadPortVal+0x8>
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	8a 83       	std	Y+2, r24	; 0x02
 38e:	7c 83       	std	Y+4, r23	; 0x04
 390:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8return_status;
	
	if(Copy_u8PortIdx > no_of_ports)
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	84 30       	cpi	r24, 0x04	; 4
 396:	10 f0       	brcs	.+4      	; 0x39c <DIO_u8ReadPortVal+0x1c>
	{
		local_u8return_status = error;
 398:	19 82       	std	Y+1, r1	; 0x01
 39a:	11 c0       	rjmp	.+34     	; 0x3be <DIO_u8ReadPortVal+0x3e>
	}
	else
	{
		*Copy_u8PtrToVal = *(DIO_u8ports[Copy_u8PortIdx]);
 39c:	8a 81       	ldd	r24, Y+2	; 0x02
 39e:	88 2f       	mov	r24, r24
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	fc 01       	movw	r30, r24
 3a8:	ef 59       	subi	r30, 0x9F	; 159
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	01 90       	ld	r0, Z+
 3ae:	f0 81       	ld	r31, Z
 3b0:	e0 2d       	mov	r30, r0
 3b2:	80 81       	ld	r24, Z
 3b4:	eb 81       	ldd	r30, Y+3	; 0x03
 3b6:	fc 81       	ldd	r31, Y+4	; 0x04
 3b8:	80 83       	st	Z, r24
		local_u8return_status = okay;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	89 83       	std	Y+1, r24	; 0x01
	}
    return local_u8return_status;
 3be:	89 81       	ldd	r24, Y+1	; 0x01
}
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	cf 91       	pop	r28
 3ca:	df 91       	pop	r29
 3cc:	08 95       	ret

000003ce <DIO_u8WritePinVal>:

extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8PinVal)
{
 3ce:	df 93       	push	r29
 3d0:	cf 93       	push	r28
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <DIO_u8WritePinVal+0x6>
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <DIO_u8WritePinVal+0x8>
 3d6:	0f 92       	push	r0
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	8a 83       	std	Y+2, r24	; 0x02
 3de:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8return_status;
	
	if(Copy_u8PinIdx > no_of_total_pins)
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	80 32       	cpi	r24, 0x20	; 32
 3e4:	10 f0       	brcs	.+4      	; 0x3ea <DIO_u8WritePinVal+0x1c>
		{
			local_u8return_status = error;
 3e6:	19 82       	std	Y+1, r1	; 0x01
 3e8:	71 c0       	rjmp	.+226    	; 0x4cc <DIO_u8WritePinVal+0xfe>
		}
	else
		{
			switch(Copy_u8PinVal)
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	3d 83       	std	Y+5, r19	; 0x05
 3f2:	2c 83       	std	Y+4, r18	; 0x04
 3f4:	8c 81       	ldd	r24, Y+4	; 0x04
 3f6:	9d 81       	ldd	r25, Y+5	; 0x05
 3f8:	00 97       	sbiw	r24, 0x00	; 0
 3fa:	b1 f1       	breq	.+108    	; 0x468 <DIO_u8WritePinVal+0x9a>
 3fc:	2c 81       	ldd	r18, Y+4	; 0x04
 3fe:	3d 81       	ldd	r19, Y+5	; 0x05
 400:	21 30       	cpi	r18, 0x01	; 1
 402:	31 05       	cpc	r19, r1
 404:	09 f0       	breq	.+2      	; 0x408 <DIO_u8WritePinVal+0x3a>
 406:	61 c0       	rjmp	.+194    	; 0x4ca <DIO_u8WritePinVal+0xfc>
			{
				case DIO_u8HIGH:
					SetBit(*(DIO_u8ports[(u8)(port_number)]),(Copy_u8PinIdx%no_of_pins));
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	86 95       	lsr	r24
 40c:	86 95       	lsr	r24
 40e:	86 95       	lsr	r24
 410:	88 2f       	mov	r24, r24
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	fc 01       	movw	r30, r24
 41a:	ef 59       	subi	r30, 0x9F	; 159
 41c:	ff 4f       	sbci	r31, 0xFF	; 255
 41e:	a0 81       	ld	r26, Z
 420:	b1 81       	ldd	r27, Z+1	; 0x01
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	86 95       	lsr	r24
 426:	86 95       	lsr	r24
 428:	86 95       	lsr	r24
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	fc 01       	movw	r30, r24
 434:	ef 59       	subi	r30, 0x9F	; 159
 436:	ff 4f       	sbci	r31, 0xFF	; 255
 438:	01 90       	ld	r0, Z+
 43a:	f0 81       	ld	r31, Z
 43c:	e0 2d       	mov	r30, r0
 43e:	80 81       	ld	r24, Z
 440:	48 2f       	mov	r20, r24
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	88 2f       	mov	r24, r24
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	9c 01       	movw	r18, r24
 44a:	27 70       	andi	r18, 0x07	; 7
 44c:	30 70       	andi	r19, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 2e       	mov	r0, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_u8WritePinVal+0x8c>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	0a 94       	dec	r0
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_u8WritePinVal+0x88>
 45e:	84 2b       	or	r24, r20
 460:	8c 93       	st	X, r24
					local_u8return_status = okay;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	89 83       	std	Y+1, r24	; 0x01
 466:	32 c0       	rjmp	.+100    	; 0x4cc <DIO_u8WritePinVal+0xfe>
					break;
				case DIO_u8LOW:
					ClrBit(*(DIO_u8ports[(u8)(port_number)]),(Copy_u8PinIdx%no_of_pins));
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	86 95       	lsr	r24
 46c:	86 95       	lsr	r24
 46e:	86 95       	lsr	r24
 470:	88 2f       	mov	r24, r24
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	fc 01       	movw	r30, r24
 47a:	ef 59       	subi	r30, 0x9F	; 159
 47c:	ff 4f       	sbci	r31, 0xFF	; 255
 47e:	a0 81       	ld	r26, Z
 480:	b1 81       	ldd	r27, Z+1	; 0x01
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	86 95       	lsr	r24
 486:	86 95       	lsr	r24
 488:	86 95       	lsr	r24
 48a:	88 2f       	mov	r24, r24
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	fc 01       	movw	r30, r24
 494:	ef 59       	subi	r30, 0x9F	; 159
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	01 90       	ld	r0, Z+
 49a:	f0 81       	ld	r31, Z
 49c:	e0 2d       	mov	r30, r0
 49e:	80 81       	ld	r24, Z
 4a0:	48 2f       	mov	r20, r24
 4a2:	8a 81       	ldd	r24, Y+2	; 0x02
 4a4:	88 2f       	mov	r24, r24
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	9c 01       	movw	r18, r24
 4aa:	27 70       	andi	r18, 0x07	; 7
 4ac:	30 70       	andi	r19, 0x00	; 0
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 2e       	mov	r0, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_u8WritePinVal+0xec>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	0a 94       	dec	r0
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_u8WritePinVal+0xe8>
 4be:	80 95       	com	r24
 4c0:	84 23       	and	r24, r20
 4c2:	8c 93       	st	X, r24
					local_u8return_status = okay;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	89 83       	std	Y+1, r24	; 0x01
 4c8:	01 c0       	rjmp	.+2      	; 0x4cc <DIO_u8WritePinVal+0xfe>
					break;
				default:
					local_u8return_status = error;
 4ca:	19 82       	std	Y+1, r1	; 0x01
					break;
				
			}
		}
	
	return local_u8return_status;
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
}
 4ce:	0f 90       	pop	r0
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	cf 91       	pop	r28
 4da:	df 91       	pop	r29
 4dc:	08 95       	ret

000004de <DIO_u8ReadPinVal>:

extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToVal)
{
 4de:	df 93       	push	r29
 4e0:	cf 93       	push	r28
 4e2:	00 d0       	rcall	.+0      	; 0x4e4 <DIO_u8ReadPinVal+0x6>
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <DIO_u8ReadPinVal+0x8>
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	8a 83       	std	Y+2, r24	; 0x02
 4ec:	7c 83       	std	Y+4, r23	; 0x04
 4ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8return_status;
	
	if(Copy_u8PinIdx > no_of_total_pins)
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	80 32       	cpi	r24, 0x20	; 32
 4f4:	10 f0       	brcs	.+4      	; 0x4fa <DIO_u8ReadPinVal+0x1c>
		{
			local_u8return_status = error;
 4f6:	19 82       	std	Y+1, r1	; 0x01
 4f8:	23 c0       	rjmp	.+70     	; 0x540 <DIO_u8ReadPinVal+0x62>
		}
	else
		{
			*Copy_u8PtrToVal = GetBit(*(DIO_u8pins[(u8)(port_number)]),(Copy_u8PinIdx%no_of_pins));
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	86 95       	lsr	r24
 4fe:	86 95       	lsr	r24
 500:	86 95       	lsr	r24
 502:	88 2f       	mov	r24, r24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	fc 01       	movw	r30, r24
 50c:	ef 58       	subi	r30, 0x8F	; 143
 50e:	ff 4f       	sbci	r31, 0xFF	; 255
 510:	01 90       	ld	r0, Z+
 512:	f0 81       	ld	r31, Z
 514:	e0 2d       	mov	r30, r0
 516:	80 81       	ld	r24, Z
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	8a 81       	ldd	r24, Y+2	; 0x02
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	87 70       	andi	r24, 0x07	; 7
 524:	90 70       	andi	r25, 0x00	; 0
 526:	a9 01       	movw	r20, r18
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_u8ReadPinVal+0x50>
 52a:	55 95       	asr	r21
 52c:	47 95       	ror	r20
 52e:	8a 95       	dec	r24
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_u8ReadPinVal+0x4c>
 532:	ca 01       	movw	r24, r20
 534:	81 70       	andi	r24, 0x01	; 1
 536:	eb 81       	ldd	r30, Y+3	; 0x03
 538:	fc 81       	ldd	r31, Y+4	; 0x04
 53a:	80 83       	st	Z, r24
			local_u8return_status = okay;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	89 83       	std	Y+1, r24	; 0x01
		}
	
	return local_u8return_status;
 540:	89 81       	ldd	r24, Y+1	; 0x01
}
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	cf 91       	pop	r28
 54c:	df 91       	pop	r29
 54e:	08 95       	ret

00000550 <USART_Init>:
 * Input: None
 * Prerequisite: None
 * Return: None
 ************************************************************/

extern void USART_Init(void) {
 550:	df 93       	push	r29
 552:	cf 93       	push	r28
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
	/*********************Enable Global Interrupt***************/
	__asm__("SEI");
 558:	78 94       	sei
	/************** Set baud rate **************/
	UBRRH = (u8) (UBRR_VAL >> 8);
 55a:	e0 e4       	ldi	r30, 0x40	; 64
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	10 82       	st	Z, r1
	UBRRL = (u8) UBRR_VAL;
 560:	e9 e2       	ldi	r30, 0x29	; 41
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 eb       	ldi	r24, 0xB0	; 176
 566:	80 83       	st	Z, r24
	/************** Enable transmitter **************/
	#if USART_TRANSMIT == USART_ENABLE
		UCSRB = UCSRB | (1 << TXEN);
 568:	aa e2       	ldi	r26, 0x2A	; 42
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	ea e2       	ldi	r30, 0x2A	; 42
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	88 60       	ori	r24, 0x08	; 8
 574:	8c 93       	st	X, r24
	#elif USART_TRANSMIT == USART_DISABLE
		ClrBit(UCSRB,TXEN);
	#endif
		/************** Enable receiver **************/
	#if USART_RECIEVE == USART_ENABLE
		UCSRB = UCSRB | (1 << RXEN);
 576:	aa e2       	ldi	r26, 0x2A	; 42
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	ea e2       	ldi	r30, 0x2A	; 42
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	80 61       	ori	r24, 0x10	; 16
 582:	8c 93       	st	X, r24
	#endif
	/**************** Set character size***************/
	#if USART_CHAR_SIZE != USART_9_Bit_CHAR
		UCSRC = (1 << URSEL) | (USART_CHAR_SIZE);
	#elif USART_CHAR_SIZE == USART_9_Bit_CHAR
		UCSRC = (1 << URSEL) | (USART_CHAR_SIZE);
 584:	e0 e4       	ldi	r30, 0x40	; 64
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	86 e8       	ldi	r24, 0x86	; 134
 58a:	80 83       	st	Z, r24
		SetBit(UCSRB,2);
 58c:	aa e2       	ldi	r26, 0x2A	; 42
 58e:	b0 e0       	ldi	r27, 0x00	; 0
 590:	ea e2       	ldi	r30, 0x2A	; 42
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	84 60       	ori	r24, 0x04	; 4
 598:	8c 93       	st	X, r24
	#endif
		/**************** Set Double speed***************/
	#if ((USART_SYNCH_MODE == USART_ASYNCH) && (USART_SPEED_MODE == USART_DOUBLE_SPEED))
		SetBit(UCSRA,U2X);
 59a:	ab e2       	ldi	r26, 0x2B	; 43
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	eb e2       	ldi	r30, 0x2B	; 43
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	82 60       	ori	r24, 0x02	; 2
 5a6:	8c 93       	st	X, r24
	#endif
		/**************** Set Parity Bit***************/
		UCSRC |= (1<<URSEL) | USART_PARITY_MODE;
 5a8:	a0 e4       	ldi	r26, 0x40	; 64
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	e0 e4       	ldi	r30, 0x40	; 64
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	80 68       	ori	r24, 0x80	; 128
 5b4:	8c 93       	st	X, r24
		/**************** Set SYNCH ASYNCH***************/
		UCSRC |= (1<<URSEL) | USART_SYNCH_MODE;
 5b6:	a0 e4       	ldi	r26, 0x40	; 64
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	e0 e4       	ldi	r30, 0x40	; 64
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	80 68       	ori	r24, 0x80	; 128
 5c2:	8c 93       	st	X, r24
		/**************** Set Stop Bit***************/
		UCSRC |= (1<<URSEL) | USART_STOPBIT;
 5c4:	a0 e4       	ldi	r26, 0x40	; 64
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	e0 e4       	ldi	r30, 0x40	; 64
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	80 68       	ori	r24, 0x80	; 128
 5d0:	8c 93       	st	X, r24
		/***************RECIEVER INT ENABLE**********/
		UCSRB |= USART_RECIEVE_INT;
 5d2:	aa e2       	ldi	r26, 0x2A	; 42
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	ea e2       	ldi	r30, 0x2A	; 42
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	80 68       	ori	r24, 0x80	; 128
 5de:	8c 93       	st	X, r24
		/***************TRANSMITER INT ENABLE**********/
		UCSRB |= USART_TRANSMITER_INT;
 5e0:	aa e2       	ldi	r26, 0x2A	; 42
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	ea e2       	ldi	r30, 0x2A	; 42
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	80 64       	ori	r24, 0x40	; 64
 5ec:	8c 93       	st	X, r24
}
 5ee:	cf 91       	pop	r28
 5f0:	df 91       	pop	r29
 5f2:	08 95       	ret

000005f4 <USART_Transmit>:
 * Input: Data
 * Prerequisite: USART Init
 * Return: None
 ************************************************************/

extern void USART_Transmit(u16 data) {
 5f4:	df 93       	push	r29
 5f6:	cf 93       	push	r28
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <USART_Transmit+0x6>
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	9a 83       	std	Y+2, r25	; 0x02
 600:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (!( UCSRA & (1 << UDRE)))
 602:	eb e2       	ldi	r30, 0x2B	; 43
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	88 2f       	mov	r24, r24
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	80 72       	andi	r24, 0x20	; 32
 60e:	90 70       	andi	r25, 0x00	; 0
 610:	00 97       	sbiw	r24, 0x00	; 0
 612:	b9 f3       	breq	.-18     	; 0x602 <USART_Transmit+0xe>
		;
	/***********if the data to be transmitted is 9 bits, write the MSB first*****************/
	#if USART_CHAR_SIZE  ==	USART_9_Bit_CHAR
		UCSRB |= GetBit(data,8);
 614:	aa e2       	ldi	r26, 0x2A	; 42
 616:	b0 e0       	ldi	r27, 0x00	; 0
 618:	ea e2       	ldi	r30, 0x2A	; 42
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	20 81       	ld	r18, Z
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	9a 81       	ldd	r25, Y+2	; 0x02
 622:	89 2f       	mov	r24, r25
 624:	99 27       	eor	r25, r25
 626:	81 70       	andi	r24, 0x01	; 1
 628:	82 2b       	or	r24, r18
 62a:	8c 93       	st	X, r24
	#endif
		/* Put data into buffer, sends the data */
	UDR = (u8)data;
 62c:	ec e2       	ldi	r30, 0x2C	; 44
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	89 81       	ldd	r24, Y+1	; 0x01
 632:	80 83       	st	Z, r24
}
 634:	0f 90       	pop	r0
 636:	0f 90       	pop	r0
 638:	cf 91       	pop	r28
 63a:	df 91       	pop	r29
 63c:	08 95       	ret

0000063e <USART_Receive>:
 * Function Description: USART Receives Data received
 * Input: Pointer to be filled with data
 * Prerequisite: USART Init
 * Return: Parity check
 ************************************************************/
extern u8 USART_Receive(u16 *Ptr_To_Val) {
 63e:	df 93       	push	r29
 640:	cf 93       	push	r28
 642:	00 d0       	rcall	.+0      	; 0x644 <USART_Receive+0x6>
 644:	0f 92       	push	r0
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
 64a:	9b 83       	std	Y+3, r25	; 0x03
 64c:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8ParityError = error;
 64e:	19 82       	std	Y+1, r1	; 0x01
	*Ptr_To_Val = 0;
 650:	ea 81       	ldd	r30, Y+2	; 0x02
 652:	fb 81       	ldd	r31, Y+3	; 0x03
 654:	11 82       	std	Z+1, r1	; 0x01
 656:	10 82       	st	Z, r1
	/* Wait for data to be received */
	while (!(UCSRA & (1 << RXC)))
 658:	eb e2       	ldi	r30, 0x2B	; 43
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	88 23       	and	r24, r24
 660:	dc f7       	brge	.-10     	; 0x658 <USART_Receive+0x1a>
		;
	/****************Check if parity error is not ON********/
	if(GetBit(UCSRA,PE) != 1)
 662:	eb e2       	ldi	r30, 0x2B	; 43
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	86 95       	lsr	r24
 66a:	86 95       	lsr	r24
 66c:	88 2f       	mov	r24, r24
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	81 70       	andi	r24, 0x01	; 1
 672:	90 70       	andi	r25, 0x00	; 0
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	f9 f4       	brne	.+62     	; 0x6b6 <USART_Receive+0x78>
	{/***********if the data to be recieved is 9 bits, get the MSB first*****************/
	#if USART_CHAR_SIZE  ==	USART_9_Bit_CHAR
		*Ptr_To_Val = GetBit(UCSRB,1)<<8;
 678:	ea e2       	ldi	r30, 0x2A	; 42
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	86 95       	lsr	r24
 680:	88 2f       	mov	r24, r24
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	81 70       	andi	r24, 0x01	; 1
 686:	90 70       	andi	r25, 0x00	; 0
 688:	98 2f       	mov	r25, r24
 68a:	88 27       	eor	r24, r24
 68c:	ea 81       	ldd	r30, Y+2	; 0x02
 68e:	fb 81       	ldd	r31, Y+3	; 0x03
 690:	91 83       	std	Z+1, r25	; 0x01
 692:	80 83       	st	Z, r24
	#endif
		/* Get and return received data from buffer */
		*Ptr_To_Val |= UDR;
 694:	ea 81       	ldd	r30, Y+2	; 0x02
 696:	fb 81       	ldd	r31, Y+3	; 0x03
 698:	20 81       	ld	r18, Z
 69a:	31 81       	ldd	r19, Z+1	; 0x01
 69c:	ec e2       	ldi	r30, 0x2C	; 44
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	88 2f       	mov	r24, r24
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	82 2b       	or	r24, r18
 6a8:	93 2b       	or	r25, r19
 6aa:	ea 81       	ldd	r30, Y+2	; 0x02
 6ac:	fb 81       	ldd	r31, Y+3	; 0x03
 6ae:	91 83       	std	Z+1, r25	; 0x01
 6b0:	80 83       	st	Z, r24
		local_u8ParityError = okay;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8ParityError;
 6b6:	89 81       	ldd	r24, Y+1	; 0x01

}
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	cf 91       	pop	r28
 6c0:	df 91       	pop	r29
 6c2:	08 95       	ret

000006c4 <USART_Rec_Int_Enable>:
 * Input: None
 * Prerequisite: USART Init
 * Return: None
 ************************************************************/
extern void USART_Rec_Int_Enable(void)
{
 6c4:	df 93       	push	r29
 6c6:	cf 93       	push	r28
 6c8:	cd b7       	in	r28, 0x3d	; 61
 6ca:	de b7       	in	r29, 0x3e	; 62
	SetBit(UCSRB,RXCIE);
 6cc:	aa e2       	ldi	r26, 0x2A	; 42
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
 6d0:	ea e2       	ldi	r30, 0x2A	; 42
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	80 68       	ori	r24, 0x80	; 128
 6d8:	8c 93       	st	X, r24
}
 6da:	cf 91       	pop	r28
 6dc:	df 91       	pop	r29
 6de:	08 95       	ret

000006e0 <USART_Rec_Int_Disable>:
 * Input: None
 * Prerequisite: USART Init
 * Return: None
 ************************************************************/
extern void USART_Rec_Int_Disable(void)
{
 6e0:	df 93       	push	r29
 6e2:	cf 93       	push	r28
 6e4:	cd b7       	in	r28, 0x3d	; 61
 6e6:	de b7       	in	r29, 0x3e	; 62
	ClrBit(UCSRB,RXCIE);
 6e8:	aa e2       	ldi	r26, 0x2A	; 42
 6ea:	b0 e0       	ldi	r27, 0x00	; 0
 6ec:	ea e2       	ldi	r30, 0x2A	; 42
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	8f 77       	andi	r24, 0x7F	; 127
 6f4:	8c 93       	st	X, r24
}
 6f6:	cf 91       	pop	r28
 6f8:	df 91       	pop	r29
 6fa:	08 95       	ret

000006fc <USART_Trans_Int_Enable>:
 * Input: None
 * Prerequisite: USART Init
 * Return: None
 ************************************************************/
extern void USART_Trans_Int_Enable(void)
{
 6fc:	df 93       	push	r29
 6fe:	cf 93       	push	r28
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
	SetBit(UCSRB,TXCIE);
 704:	aa e2       	ldi	r26, 0x2A	; 42
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	ea e2       	ldi	r30, 0x2A	; 42
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	80 64       	ori	r24, 0x40	; 64
 710:	8c 93       	st	X, r24
}
 712:	cf 91       	pop	r28
 714:	df 91       	pop	r29
 716:	08 95       	ret

00000718 <USART_Trans_Int_Disable>:
 * Input: None
 * Prerequisite: USART Init
 * Return: None
 ************************************************************/
extern void USART_Trans_Int_Disable(void)
{
 718:	df 93       	push	r29
 71a:	cf 93       	push	r28
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
	ClrBit(UCSRB,TXCIE);
 720:	aa e2       	ldi	r26, 0x2A	; 42
 722:	b0 e0       	ldi	r27, 0x00	; 0
 724:	ea e2       	ldi	r30, 0x2A	; 42
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
 72a:	8f 7b       	andi	r24, 0xBF	; 191
 72c:	8c 93       	st	X, r24
}
 72e:	cf 91       	pop	r28
 730:	df 91       	pop	r29
 732:	08 95       	ret

00000734 <USART_Rec_Enable>:
 * Input: None
 * Prerequisite: USART Init
 * Return: None
 ************************************************************/
extern void USART_Rec_Enable(void)
{
 734:	df 93       	push	r29
 736:	cf 93       	push	r28
 738:	cd b7       	in	r28, 0x3d	; 61
 73a:	de b7       	in	r29, 0x3e	; 62
	SetBit(UCSRB,RXEN);
 73c:	aa e2       	ldi	r26, 0x2A	; 42
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	ea e2       	ldi	r30, 0x2A	; 42
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	80 61       	ori	r24, 0x10	; 16
 748:	8c 93       	st	X, r24
}
 74a:	cf 91       	pop	r28
 74c:	df 91       	pop	r29
 74e:	08 95       	ret

00000750 <USART_Rec_Disable>:
 * Input: None
 * Prerequisite: USART Init
 * Return: None
 ************************************************************/
extern void USART_Rec_Disable(void)
{
 750:	df 93       	push	r29
 752:	cf 93       	push	r28
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
	ClrBit(UCSRB,RXEN);
 758:	aa e2       	ldi	r26, 0x2A	; 42
 75a:	b0 e0       	ldi	r27, 0x00	; 0
 75c:	ea e2       	ldi	r30, 0x2A	; 42
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	8f 7e       	andi	r24, 0xEF	; 239
 764:	8c 93       	st	X, r24
}
 766:	cf 91       	pop	r28
 768:	df 91       	pop	r29
 76a:	08 95       	ret

0000076c <USART_Trans_Enable>:
 * Input: None
 * Prerequisite: USART Init
 * Return: None
 ************************************************************/
extern void USART_Trans_Enable(void)
{
 76c:	df 93       	push	r29
 76e:	cf 93       	push	r28
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
	SetBit(UCSRB,TXEN);
 774:	aa e2       	ldi	r26, 0x2A	; 42
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	ea e2       	ldi	r30, 0x2A	; 42
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	88 60       	ori	r24, 0x08	; 8
 780:	8c 93       	st	X, r24
}
 782:	cf 91       	pop	r28
 784:	df 91       	pop	r29
 786:	08 95       	ret

00000788 <USART_Trans_Disable>:
 * Input: None
 * Prerequisite: USART Init
 * Return: None
 ************************************************************/
extern void USART_Trans_Disable(void)
{
 788:	df 93       	push	r29
 78a:	cf 93       	push	r28
 78c:	cd b7       	in	r28, 0x3d	; 61
 78e:	de b7       	in	r29, 0x3e	; 62
	ClrBit(UCSRB,TXEN);
 790:	aa e2       	ldi	r26, 0x2A	; 42
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	ea e2       	ldi	r30, 0x2A	; 42
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	87 7f       	andi	r24, 0xF7	; 247
 79c:	8c 93       	st	X, r24
}
 79e:	cf 91       	pop	r28
 7a0:	df 91       	pop	r29
 7a2:	08 95       	ret

000007a4 <USART_callback_Rec_Int>:
 * Input: None
 * Prerequisite: USART Init
 * Return: None
 ************************************************************/
extern void USART_callback_Rec_Int(void (*Ptr_to_Func)(void))
{
 7a4:	df 93       	push	r29
 7a6:	cf 93       	push	r28
 7a8:	00 d0       	rcall	.+0      	; 0x7aa <USART_callback_Rec_Int+0x6>
 7aa:	cd b7       	in	r28, 0x3d	; 61
 7ac:	de b7       	in	r29, 0x3e	; 62
 7ae:	9a 83       	std	Y+2, r25	; 0x02
 7b0:	89 83       	std	Y+1, r24	; 0x01
	Ptr_To_Rec_Int = Ptr_to_Func;
 7b2:	89 81       	ldd	r24, Y+1	; 0x01
 7b4:	9a 81       	ldd	r25, Y+2	; 0x02
 7b6:	90 93 7d 00 	sts	0x007D, r25
 7ba:	80 93 7c 00 	sts	0x007C, r24
}
 7be:	0f 90       	pop	r0
 7c0:	0f 90       	pop	r0
 7c2:	cf 91       	pop	r28
 7c4:	df 91       	pop	r29
 7c6:	08 95       	ret

000007c8 <USART_callback_Trans_Int>:
 * Input: None
 * Prerequisite: USART Init
 * Return: None
 ************************************************************/
extern void USART_callback_Trans_Int(void (*Ptr_to_Func)(void))
{
 7c8:	df 93       	push	r29
 7ca:	cf 93       	push	r28
 7cc:	00 d0       	rcall	.+0      	; 0x7ce <USART_callback_Trans_Int+0x6>
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	9a 83       	std	Y+2, r25	; 0x02
 7d4:	89 83       	std	Y+1, r24	; 0x01
	Ptr_To_Trans_Int = Ptr_to_Func;
 7d6:	89 81       	ldd	r24, Y+1	; 0x01
 7d8:	9a 81       	ldd	r25, Y+2	; 0x02
 7da:	90 93 7b 00 	sts	0x007B, r25
 7de:	80 93 7a 00 	sts	0x007A, r24
}
 7e2:	0f 90       	pop	r0
 7e4:	0f 90       	pop	r0
 7e6:	cf 91       	pop	r28
 7e8:	df 91       	pop	r29
 7ea:	08 95       	ret

000007ec <__vector_13>:
/*************************************************************
 * ISR Description: Receiver ISR
 * Prerequisite: USART_callback_Rec_Int
 ************************************************************/
ISR(__vector_13)
{
 7ec:	1f 92       	push	r1
 7ee:	0f 92       	push	r0
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	0f 92       	push	r0
 7f4:	11 24       	eor	r1, r1
 7f6:	2f 93       	push	r18
 7f8:	3f 93       	push	r19
 7fa:	4f 93       	push	r20
 7fc:	5f 93       	push	r21
 7fe:	6f 93       	push	r22
 800:	7f 93       	push	r23
 802:	8f 93       	push	r24
 804:	9f 93       	push	r25
 806:	af 93       	push	r26
 808:	bf 93       	push	r27
 80a:	ef 93       	push	r30
 80c:	ff 93       	push	r31
 80e:	df 93       	push	r29
 810:	cf 93       	push	r28
 812:	cd b7       	in	r28, 0x3d	; 61
 814:	de b7       	in	r29, 0x3e	; 62
	(*Ptr_To_Rec_Int)();
 816:	e0 91 7c 00 	lds	r30, 0x007C
 81a:	f0 91 7d 00 	lds	r31, 0x007D
 81e:	09 95       	icall
}
 820:	cf 91       	pop	r28
 822:	df 91       	pop	r29
 824:	ff 91       	pop	r31
 826:	ef 91       	pop	r30
 828:	bf 91       	pop	r27
 82a:	af 91       	pop	r26
 82c:	9f 91       	pop	r25
 82e:	8f 91       	pop	r24
 830:	7f 91       	pop	r23
 832:	6f 91       	pop	r22
 834:	5f 91       	pop	r21
 836:	4f 91       	pop	r20
 838:	3f 91       	pop	r19
 83a:	2f 91       	pop	r18
 83c:	0f 90       	pop	r0
 83e:	0f be       	out	0x3f, r0	; 63
 840:	0f 90       	pop	r0
 842:	1f 90       	pop	r1
 844:	18 95       	reti

00000846 <__vector_15>:
/*************************************************************
 * ISR Description: Transmitter ISR
 * Prerequisite: USART_callback_Trans_Int
 ************************************************************/
ISR(__vector_15)
{
 846:	1f 92       	push	r1
 848:	0f 92       	push	r0
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	0f 92       	push	r0
 84e:	11 24       	eor	r1, r1
 850:	2f 93       	push	r18
 852:	3f 93       	push	r19
 854:	4f 93       	push	r20
 856:	5f 93       	push	r21
 858:	6f 93       	push	r22
 85a:	7f 93       	push	r23
 85c:	8f 93       	push	r24
 85e:	9f 93       	push	r25
 860:	af 93       	push	r26
 862:	bf 93       	push	r27
 864:	ef 93       	push	r30
 866:	ff 93       	push	r31
 868:	df 93       	push	r29
 86a:	cf 93       	push	r28
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
	(*Ptr_To_Trans_Int)();
 870:	e0 91 7a 00 	lds	r30, 0x007A
 874:	f0 91 7b 00 	lds	r31, 0x007B
 878:	09 95       	icall
}
 87a:	cf 91       	pop	r28
 87c:	df 91       	pop	r29
 87e:	ff 91       	pop	r31
 880:	ef 91       	pop	r30
 882:	bf 91       	pop	r27
 884:	af 91       	pop	r26
 886:	9f 91       	pop	r25
 888:	8f 91       	pop	r24
 88a:	7f 91       	pop	r23
 88c:	6f 91       	pop	r22
 88e:	5f 91       	pop	r21
 890:	4f 91       	pop	r20
 892:	3f 91       	pop	r19
 894:	2f 91       	pop	r18
 896:	0f 90       	pop	r0
 898:	0f be       	out	0x3f, r0	; 63
 89a:	0f 90       	pop	r0
 89c:	1f 90       	pop	r1
 89e:	18 95       	reti

000008a0 <transTest>:
#include "delay.h"
#include "DIO_interface.h"

#define USART_TEST_INT	0
void transTest(void)
{
 8a0:	df 93       	push	r29
 8a2:	cf 93       	push	r28
 8a4:	0f 92       	push	r0
 8a6:	cd b7       	in	r28, 0x3d	; 61
 8a8:	de b7       	in	r29, 0x3e	; 62
	static u8 toggle = 1;
	DIO_u8WritePinVal(USART_TEST_INT,toggle);
 8aa:	90 91 60 00 	lds	r25, 0x0060
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	69 2f       	mov	r22, r25
 8b2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <DIO_u8WritePinVal>
	//DELAY_MS(10);
	toggle = !toggle;
 8b6:	80 91 60 00 	lds	r24, 0x0060
 8ba:	19 82       	std	Y+1, r1	; 0x01
 8bc:	88 23       	and	r24, r24
 8be:	11 f4       	brne	.+4      	; 0x8c4 <transTest+0x24>
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	89 83       	std	Y+1, r24	; 0x01
 8c4:	89 81       	ldd	r24, Y+1	; 0x01
 8c6:	80 93 60 00 	sts	0x0060, r24
}
 8ca:	0f 90       	pop	r0
 8cc:	cf 91       	pop	r28
 8ce:	df 91       	pop	r29
 8d0:	08 95       	ret

000008d2 <main>:
int main()
{
 8d2:	df 93       	push	r29
 8d4:	cf 93       	push	r28
 8d6:	cd b7       	in	r28, 0x3d	; 61
 8d8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
 8da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInit>
	USART_Init();
 8de:	0e 94 a8 02 	call	0x550	; 0x550 <USART_Init>
	__asm__("SEI");
 8e2:	78 94       	sei
	USART_Trans_Int_Enable();
 8e4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <USART_Trans_Int_Enable>
	USART_callback_Trans_Int(transTest);
 8e8:	80 e5       	ldi	r24, 0x50	; 80
 8ea:	94 e0       	ldi	r25, 0x04	; 4
 8ec:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <USART_callback_Trans_Int>

	while(1)
	{
		USART_Transmit(0xFF);
 8f0:	8f ef       	ldi	r24, 0xFF	; 255
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <USART_Transmit>

		USART_Transmit(0);
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <USART_Transmit>
		USART_Transmit(0);
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <USART_Transmit>
		USART_Transmit(0);
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <USART_Transmit>
		USART_Transmit(0);
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <USART_Transmit>
		USART_Transmit(0);
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <USART_Transmit>
		USART_Transmit(0);
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <USART_Transmit>
		USART_Transmit(0);
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <USART_Transmit>
		USART_Transmit(0);
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <USART_Transmit>
 938:	db cf       	rjmp	.-74     	; 0x8f0 <main+0x1e>

0000093a <_exit>:
 93a:	f8 94       	cli

0000093c <__stop_program>:
 93c:	ff cf       	rjmp	.-2      	; 0x93c <__stop_program>
